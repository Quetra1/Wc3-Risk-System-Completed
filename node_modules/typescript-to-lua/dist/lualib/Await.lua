function __TS__AsyncAwaiter(generator)
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            local asyncCoroutine, adopt, fulfilled, step
            function adopt(self, value)
                return ((__TS__InstanceOf(value, __TS__Promise) and (function() return value end)) or (function() return __TS__Promise.resolve(value) end))()
            end
            function fulfilled(self, value)
                local success, resultOrError = coroutine.resume(asyncCoroutine, value)
                if success then
                    step(_G, resultOrError)
                else
                    reject(_G, resultOrError)
                end
            end
            function step(self, result)
                if coroutine.status(asyncCoroutine) == "dead" then
                    resolve(_G, result)
                else
                    (function()
                        local ____self = adopt(_G, result)
                        return ____self["then"](
                            ____self,
                            fulfilled,
                            function(____, reason) return reject(_G, reason) end
                        )
                    end)()
                end
            end
            asyncCoroutine = coroutine.create(generator)
            local success, resultOrError = coroutine.resume(asyncCoroutine)
            if success then
                step(_G, resultOrError)
            else
                reject(_G, resultOrError)
            end
        end
    )
end
function __TS__Await(thing)
    return coroutine.yield(thing)
end
