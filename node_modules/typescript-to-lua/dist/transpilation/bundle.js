"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBundleResult = void 0;
const path = require("path");
const source_map_1 = require("source-map");
const LuaPrinter_1 = require("../LuaPrinter");
const utils_1 = require("../utils");
const diagnostics_1 = require("./diagnostics");
const transpiler_1 = require("./transpiler");
const createModulePath = (pathToResolve, program) => LuaPrinter_1.escapeString(utils_1.formatPathToLuaPath(utils_1.trimExtension(transpiler_1.getEmitPathRelativeToOutDir(pathToResolve, program))));
// Override `require` to read from ____modules table.
const requireOverride = `
local ____modules = {}
local ____moduleCache = {}
local ____originalRequire = require
local function require(file, ...)
    if ____moduleCache[file] then
        return ____moduleCache[file].value
    end
    if ____modules[file] then
        local module = ____modules[file]
        ____moduleCache[file] = { value = (select("#", ...) > 0) and module(...) or module(file) }
        return ____moduleCache[file].value
    else
        if ____originalRequire then
            return ____originalRequire(file)
        else
            error("module '" .. file .. "' not found")
        end
    end
end
`;
function getBundleResult(program, files) {
    const diagnostics = [];
    const options = program.getCompilerOptions();
    const bundleFile = utils_1.cast(options.luaBundle, utils_1.isNonNull);
    const entryModule = utils_1.cast(options.luaBundleEntry, utils_1.isNonNull);
    // Resolve project settings relative to project file.
    const resolvedEntryModule = path.resolve(transpiler_1.getSourceDir(program), entryModule);
    const outputPath = path.resolve(transpiler_1.getEmitOutDir(program), bundleFile);
    if (program.getSourceFile(resolvedEntryModule) === undefined && program.getSourceFile(entryModule) === undefined) {
        diagnostics.push(diagnostics_1.couldNotFindBundleEntryPoint(entryModule));
    }
    // For each file: ["<module path>"] = function() <lua content> end,
    const moduleTableEntries = files.map(f => moduleSourceNode(f, createModulePath(f.fileName, program)));
    // Create ____modules table containing all entries from moduleTableEntries
    const moduleTable = createModuleTableNode(moduleTableEntries);
    // return require("<entry module path>")
    const entryPoint = `return require(${createModulePath(entryModule, program)}, ...)\n`;
    const sourceChunks = [requireOverride, moduleTable, entryPoint];
    if (!options.noHeader) {
        sourceChunks.unshift(LuaPrinter_1.tstlHeader);
    }
    const bundleNode = joinSourceChunks(sourceChunks);
    const { code, map } = bundleNode.toStringWithSourceMap();
    return [
        diagnostics,
        {
            outputPath,
            code,
            sourceMap: map.toString(),
            sourceFiles: files.flatMap(x => { var _a; return (_a = x.sourceFiles) !== null && _a !== void 0 ? _a : []; }),
        },
    ];
}
exports.getBundleResult = getBundleResult;
function moduleSourceNode({ code, sourceMapNode }, modulePath) {
    const tableEntryHead = `[${modulePath}] = function(...) `;
    const tableEntryTail = " end,\n";
    return joinSourceChunks([tableEntryHead, sourceMapNode !== null && sourceMapNode !== void 0 ? sourceMapNode : code, tableEntryTail]);
}
function createModuleTableNode(fileChunks) {
    const tableHead = "____modules = {\n";
    const tableEnd = "}\n";
    return joinSourceChunks([tableHead, ...fileChunks, tableEnd]);
}
function joinSourceChunks(chunks) {
    return new source_map_1.SourceNode(null, null, null, chunks);
}
//# sourceMappingURL=bundle.js.map