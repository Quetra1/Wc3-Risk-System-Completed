/**
 * Original C# Author: William (TinkerWorX)
 * Converting to Typescript: Henning Berge (Promises)
 */
export interface TypeDefinition {
    Name: string;
    Parent: string;
}
export declare class ArgumentDefinition {
    Type: string;
    Name: string;
    constructor(Type: string, Name: string);
}
export interface NativeDefinition {
    Name: string;
    Arguments: ArgumentDefinition[];
    ReturnType: string;
}
export interface GlobalDefinition {
    IsConstant: boolean;
    Type: string;
    IsArray: boolean;
    Name: string;
    Value: string;
}
export interface FunctionDefinition {
    Name: string;
    Arguments: ArgumentDefinition[];
    ReturnType: string;
}
export interface LibraryDefinition {
    Types: TypeDefinition[];
    Natives: NativeDefinition[];
    Globals: GlobalDefinition[];
    Functions: FunctionDefinition[];
}
export declare class JassParser {
    private TYPE_DEFINITION;
    private NATIVE_DEFINITION;
    GLOBAL_DEFINITION: RegExp;
    private FUNCTION_DEFINITION;
    private static isNullOrWhitespace;
    private static clean;
    private static writeLine;
    private static blankLine;
    private static Magic;
    private static FixType;
    private parseLines;
    private parseFile;
    main(args: string[]): 1 | 0;
}
